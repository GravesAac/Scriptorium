// AI Disclosure: This file may partially contain code generated by models such as GitHub Copilot or ChatGPT
import prisma from '../../../utils/db';
import { authMiddleware } from '../../../utils/middleware';
import { comparePassword, hashPassword } from '../../../utils/auth';

async function handler(req, res) {
  const { user } = req; // Authenticated user
  const { oldPassword, newPassword } = req.body;

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Validate input
  if (!oldPassword || !newPassword) {
    return res.status(400).json({ error: 'Both old and new passwords are required' });
  }

  try {
    // Fetch user from the database
    const existingUser = await prisma.user.findUnique({
      where: { id: user.userId },
      select: { password: true }, // Only retrieve the password hash
    });

    if (!existingUser) {
      return res.status(404).json({ error: 'User not found' });
    }

    // Check if the old password is correct
    const isPasswordValid = await comparePassword(oldPassword, existingUser.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Old password is incorrect' });
    }

    // Hash the new password
    const hashedPassword = await hashPassword(newPassword);

    // Update the password in the database
    await prisma.user.update({
      where: { id: user.userId },
      data: { password: hashedPassword },
    });

    return res.status(200).json({ message: 'Password updated successfully' });
  } catch (error) {
    console.error('Failed to update password:', error);
    return res.status(500).json({ error: 'Failed to update password' });
  }
}

export default authMiddleware(handler);
