// AI Disclosure: This file may partially contain code generated by models such as GitHub Copiolot or ChatGPT
import prisma from "../../../utils/db";

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { title, content, tag, template, sortBy = 'rating', order = 'desc', page = 1, limit = 10 } = req.query;

  const skip = (page - 1) * limit;
  const take = parseInt(limit);

  try {
    // Fetch blog posts based on the search criteria
    const posts = await prisma.blogPost.findMany({
      where: {
        AND: [
          { hidden: false }, // not include the damn hiddden blog posts
          title ? { title: { contains: title } } : {},
          content ? { content: { contains: content } } : {},
          tag ? { tags: { some: { name: { contains: tag } } } } : {},
          template ? { templates: { some: { title: { contains: template } } } } : {},
        ],
      },
      include: {
        tags: { select: { name: true } }, // Include tag names only
        user: { select: { id: true, firstName: true, lastName: true } }, // Include user details
        templates: { select: { id: true, title: true, fileContent: true } }, // Include templates details
        comments: {
          where: { hidden: false }, // Only include non-hidden comments
          include: {
            user: { select: { firstName: true, lastName: true } }, // Limited user info for comments
          },
        },
      },
      orderBy: {
        [sortBy]: order === 'desc' ? 'desc' : 'asc',
      },
      skip,
      take,
    });

    // Sort comments by rating within each post if necessary
    const sortedPosts = posts.map(post => {
      post.comments = post.comments.sort((a, b) => (order === 'desc' ? b.rating - a.rating : a.rating - b.rating));
      return post;
    });

    // Get total count for pagination metadata
    const totalPosts = await prisma.blogPost.count({
      where: {
        AND: [
          title ? { title: { contains: title } } : {},
          content ? { content: { contains: content } } : {},
          tag ? { tags: { some: { name: { contains: tag } } } } : {},
          template ? { templates: { some: { title: { contains: template } } } } : {},
        ],
      },
    });
    const totalPages = Math.ceil(totalPosts / limit);

    res.status(200).json({
      posts: sortedPosts,
      pagination: {
        totalItems: totalPosts,
        totalPages,
        currentPage: parseInt(page),
        pageSize: take,
      },
    });
  } catch (error) {
    console.error('Failed to search blog posts:', error);
    res.status(500).json({ error: 'Failed to search blog posts' });
  }
}