// AI Disclosure: This file may partially contain code generated by models such as GitHub Copilot or ChatGPT
import prisma from '../../../utils/db';
import { authMiddleware } from '../../../utils/middleware';

async function handler(req, res) {
  const { user } = req; // Authenticated user from authMiddleware

  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { page = 1, limit = 10, title, content, tags } = req.query;

  const skip = (page - 1) * limit;
  const take = parseInt(limit);

  try {
    // Query to fetch all blog posts created by the logged-in user
    const posts = await prisma.blogPost.findMany({
      where: {
        userId: user.userId, // Only fetch posts created by this user
        AND: [
          title ? { title: { contains: title } } : {},
          content ? { content: { contains: content } } : {},
          tags ? { tags: { some: { name: { contains: tags } } } } : {},
        ],
      },
      include: {
        user: {
          select: { firstName: true, lastName: true }, // Include user information
        },
        tags: {
          select: { name: true }, // Include tags with just the name
        },
        comments: {
          where: {
            OR: [
              { hidden: false }, // Include non-hidden comments
              { hidden: true, userId: user.userId }, // Include hidden comments if made by this user
            ],
          },
          include: {
            user: {
              select: { firstName: true, lastName: true }, // Include comment author information
            },
          },
        },
      },
      skip,
      take,
      orderBy: {
        createdAt: 'desc', // Order posts by creation date, newest first
      },
    });

    // Get total count for pagination
    const totalPosts = await prisma.blogPost.count({
      where: {
        userId: user.userId,
        AND: [
          title ? { title: { contains: title } } : {},
          content ? { content: { contains: content } } : {},
          tags ? { tags: { some: { name: { contains: tags } } } } : {},
        ],
      },
    });
    const totalPages = Math.ceil(totalPosts / limit);

    return res.status(200).json({
      posts,
      pagination: {
        totalItems: totalPosts,
        totalPages,
        currentPage: parseInt(page),
        pageSize: take,
      },
    });
  } catch (error) {
    console.error('Failed to fetch user blog posts:', error);
    return res.status(500).json({ error: 'Failed to fetch user blog posts' });
  }
}

export default authMiddleware(handler);
