// AI Disclosure: This file may partially contain code generated by models such as GitHub Copiolot or ChatGPT
"use client"

import * as React from "react"
import { useRouter } from "next/router"
import { ColumnDef, flexRender } from "@tanstack/react-table"

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Button } from "@/components/ui/button"

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
  currentPage: number
  totalPages: number
  setCurrentPage: React.Dispatch<React.SetStateAction<number>>
}

export function DataTable<TData, TValue>({ columns, data, currentPage, totalPages, setCurrentPage }: DataTableProps<TData, TValue>) {
  const router = useRouter()

  return (
    <div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              {columns.map((column) => (
                  
                <TableHead key={column.id as string}>
                  {// @ts-ignore
                  flexRender(column.header, {})}
                </TableHead>
              ))}
            </TableRow>
          </TableHeader>
          <TableBody>
            {data.length ? (
              data.map((row, index) => (
                <TableRow
                  key={index}
                  className="cursor-pointer"
                  onClick={() => router.push(`/editor/${(row as any).id}`)}
                >
                  {columns.map((column) => (
                    <TableCell key={column.id as string}>
                      {flexRender(
                        column.cell,
                        // @ts-ignore
                        { getValue: () => (row as any)[column.accessorKey as string] }
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell colSpan={columns.length} className="h-24 text-center">
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
        >
          Previous
        </Button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setCurrentPage((prev) => Math.min(prev + 1, totalPages))}
          disabled={currentPage === totalPages}
        >
          Next
        </Button>
      </div>
    </div>
  )
}