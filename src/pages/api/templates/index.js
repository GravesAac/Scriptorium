// AI Disclosure: This file may partially contain code generated by models such as GitHub Copiolot or ChatGPT
import prisma from "../../../utils/db";
import { authMiddleware } from '../../../utils/middleware';

async function handler(req, res) {
    if (req.method === 'POST') {
        const { title, explaination, content, tags } = req.body;
        const { user } = req; // User info from authMiddleware
        
        if (title === undefined || explaination === undefined || content === undefined || tags === undefined) {
            return res.status(400).json({ "error": "Title, explaination, content and tags are required" });
        }

        let creation = {
                    title,
                    explaination,
                    fileContent: content,
                    userId: user.userId, // Associate template with the logged-in user
                };
        if (tags !== '') {
            creation.tags = {
                connectOrCreate: tags.split(',').map(tag => ({
                    where: { name: tag }, // Check if the tag exists
                    create: { name: tag }, // Create tag if it doesn't exist
                }))
            };
        }
        console.log(creation);

        try {
            const new_template = await prisma.template.create({ data: creation });
            return res.status(201).json({ "message": "Template created", "templateId": new_template.id });
        } catch (error) {
            console.log(error);
            return res.status(500).json({ "error": 'Failed to create template' });
        }

    } else if (req.method === 'GET') {
        let { title, tags, content, explaination, userId, page, itemPerPage } = req.query;
        if (itemPerPage === undefined || isNaN(parseInt(itemPerPage) || itemPerPage === '')) {
            itemPerPage = 10;
        }
        console.log(itemPerPage);

        const searchReq = {};
        if (title !== undefined && title !== '') {
            searchReq.title = {contains: title};
        }
        if (content !== undefined && content !== '') {
            searchReq.fileContent = {contains: content};
        }
        if (explaination !== undefined && explaination !== '') {
            searchReq.explaination = {contains: explaination};
        }
        if (userId !== undefined && userId !== '') {
            searchReq.userId = parseInt(userId);
        }
        if (tags !== undefined && tags !== '') {
            searchReq.tags = {some: {name: {in: tags.split(',')}}};
        }
        // console.log(tags);
        // console.log(searchReq.tags.some.name.in);
        // try {
            const totalTemplates = await prisma.template.count({ where: searchReq });
            const totalPages = Math.ceil(totalTemplates / parseInt(itemPerPage));

            const templates = await prisma.template.findMany(
                {
                    where: searchReq,
                    include: {
                        tags: true
                    },
                    skip: page ? (parseInt(page) - 1) * parseInt(itemPerPage) : 0,
                    take: parseInt(itemPerPage)
                }
            );
            return res.json({ templates, totalPages });
            // will return an empty list if no templates are found, this is a valid response, will be handled in the frontend
        // } catch (error) {
        //     console.log(error);
        //     return res.status(400).json({ "error": 'Failed to search templates, try again' });
        // }
        
    } else {
        return res.status(405).json({ "error": "Method not allowed" });
    }
}

function authOnPostOnly(req, res) {
    if (req.method === 'POST') {
        return authMiddleware(handler)(req, res);
    } else {
        return handler(req, res);
    }
}

export default authOnPostOnly; // Protect the POST request with authMiddleware